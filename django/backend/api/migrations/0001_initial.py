# Generated by Django 3.0.2 on 2020-01-07 13:10

import backend.api.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=30, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', backend.api.models.LocalUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Archer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(default='Unnamed archer', max_length=150, verbose_name='Full Name')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Unisex')], default='U', max_length=1, verbose_name='gender')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='phone number')),
                ('nat_id', models.CharField(blank=True, max_length=30, verbose_name='National Archer ID')),
            ],
            options={
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(default='Unnamed course', max_length=150, verbose_name='Course name')),
                ('description', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, max_length=150)),
                ('halves', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('date_start', models.DateField(default=django.utils.timezone.localdate)),
                ('date_end', models.DateField(default=django.utils.timezone.localdate)),
                ('is_open', models.BooleanField(default=True)),
                ('archive', models.BooleanField(default=False)),
                ('name', models.CharField(default='Unnamed event', max_length=150)),
                ('description', models.TextField(blank=True)),
                ('catering', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('private', 'Private'), ('club', 'Club'), ('open', 'Open')], default='private', max_length=10, verbose_name='event type')),
                ('tags', models.CharField(blank=True, max_length=255, verbose_name='event tags')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_start'],
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('age_group', models.CharField(choices=[('C', 'Cub'), ('J', 'Junior'), ('A', 'Adult'), ('V', 'Veteran'), ('S', 'Senior')], max_length=1, verbose_name='age group')),
                ('style', models.CharField(choices=[('BB-C', 'Barebow Compound'), ('BB-R', 'Barebow Recurve'), ('BH-C', 'Bowhunter Compound'), ('BH-R', 'Bowhunter Recurve'), ('BL', 'Bowhunter Limited'), ('BU', 'Bowhunter Unlimited'), ('FS-C', 'Freestyle Limited Compound'), ('FS-R', 'Freestyle Limited Recurve'), ('FU', 'Freestyle Unlimited'), ('HB', 'Historic Longbow'), ('LB', 'Longbow'), ('TR', 'Traditional Recurve')], max_length=5, verbose_name='Shooting style')),
                ('eats', models.BooleanField(default=False)),
                ('comments', models.CharField(blank=True, max_length=255)),
                ('start_group', models.IntegerField(default=1)),
                ('archer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='api.Archer')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='api.Event')),
            ],
            options={
                'ordering': ['created'],
                'unique_together': {('archer', 'event', 'style')},
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ord', models.IntegerField(verbose_name='Round order')),
                ('label', models.CharField(blank=True, max_length=150, verbose_name='Label for round')),
                ('is_open', models.BooleanField(default=False, verbose_name='is round open')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='Round start time')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='api.Course')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='api.Event')),
            ],
            options={
                'ordering': ['ord'],
                'unique_together': {('ord', 'course', 'event')},
            },
        ),
        migrations.CreateModel(
            name='ScoreCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scorecards', to='api.Participant')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scorecards', to='api.Round')),
            ],
            options={
                'unique_together': {('participant', 'round')},
            },
        ),
        migrations.CreateModel(
            name='End',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ord', models.IntegerField(verbose_name='End order')),
                ('label', models.CharField(blank=True, max_length=30)),
                ('nr_of_arrows', models.PositiveSmallIntegerField()),
                ('scoring', models.CharField(max_length=150)),
                ('x', models.BooleanField(default=True, verbose_name='Target has x')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ends', to='api.Course')),
            ],
            options={
                'ordering': ['ord'],
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed archery club', max_length=150, verbose_name='Club name')),
                ('contact', models.TextField(verbose_name='Contact Information')),
                ('description', models.TextField()),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clubs_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Arrow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ord', models.IntegerField(verbose_name='arrow nr')),
                ('score', models.IntegerField(blank=True, null=True, verbose_name='arrow score')),
                ('x', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('end', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrows', to='api.End')),
                ('scorecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrows', to='api.ScoreCard')),
            ],
            options={
                'ordering': ['end', 'ord'],
            },
        ),
        migrations.AddField(
            model_name='archer',
            name='club',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Club'),
        ),
        migrations.AddField(
            model_name='archer',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='archer', to=settings.AUTH_USER_MODEL),
        ),
    ]
